#lang sicp
;Counter for consecutive bad attempts. If we reach 7, throw error.
;Correct password function call resets counter.
(define (make-account balance password)
  (let ((incorrect-count 0))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (dispatch pw m)
      (cond ((not (eq? pw password))
             (display "Incorrect password")
             (set! incorrect-count (inc incorrect-count))
             (if (>= incorrect-count 7)
                 (error "Seven consecutive bad attempts.")
                 (lambda (x) (newline))))
            ((eq? m 'withdraw)
             (set! incorrect-count 0)
             withdraw)
            ((eq? m 'deposit)
             (set! incorrect-count 0)
             deposit)
            (else (error "Uknown request -- MAKE-ACCOUNT" m))))
  dispatch))

(define acc (make-account 100 'test-pw))
((acc 'test-pw 'withdraw) 50)
((acc 'test-pw 'deposit) 20)
((acc 'test-pw2 'withdraw) 50)
((acc 'test-pw2 'withdraw) 50)
((acc 'test-pw2 'withdraw) 50)
((acc 'test-pw2 'withdraw) 50)
((acc 'test-pw2 'withdraw) 50)
((acc 'test-pw2 'withdraw) 50)
((acc 'test-pw 'deposit) 20)
((acc 'test-pw2 'withdraw) 50)