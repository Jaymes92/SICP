#lang sicp
;Queue procedures from book.
(define (front-ptr queue) (car queue))

(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item) (set-car! queue item))

(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-queue? queue) (null? (front-ptr queue)))

(define (make-queue) (cons '() '()))

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))

;Use helper function to iterate through the list, starting at the front pointer.
;Rear pointer will not change when you delete the last item, but the front-pointer dictates start of queue.
;So to print the queue, we can ignore the rear pointer which is shown by the interpreter as the returned pointers.

;I now realize I could just literally print the front-ptr.. will keep this legacy solution instead.
(define (print-queue queue)
  (define (iter current)
    (if (not (pair? current))
        (newline)
        (begin (display (car current))
               (display " ")
               (iter (cdr current)))))
  
  (if (empty-queue? queue)
      (begin (display "( )")
             (newline))
      (iter (front-ptr queue))))

;Print after each queue operation - all outputs look as expected.
(define q1 (make-queue))
(print-queue q1)
(insert-queue! q1 'a)
(print-queue q1)
(insert-queue! q1 'b)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
