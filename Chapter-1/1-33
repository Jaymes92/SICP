#lang sicp
;Prime checking (from book).
(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (square x)
  (* x x))

(define (next x)
  (if (= x 2) 3 (+ x 2)))

;My generic filtered-accumulate procedure.
(define (filtered-accumulate filter combiner null-value term a next b)
  (cond ((> a b) null-value)
        ((filter a) (combiner (term a) (filtered-accumulate filter combiner null-value term (next a) next b)))
        (else (filtered-accumulate filter combiner null-value term (next a) next b))))


;a) Calculate sum of squares of the prime numbers in interval a to b.
(define (sum-of-square-primes a b)
  (filtered-accumulate prime? + 0 square a inc b))

(sum-of-square-primes 2 10)

;b) Calculate product of positive integers less than n that are relatively prime to n
;(i.e. all positive integers i < n such that GCD(i,n) = 1).
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (relative-prime-product n)
  (define (relative-prime? i)
    (= (gcd i n) 1))
  (filtered-accumulate relative-prime? * 1 identity 1 inc n))

(relative-prime-product 8)