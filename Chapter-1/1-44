#lang sicp
(define (repeated f n)
  (define (iter count)
    (if (>= count n)
        f
        (compose f (iter (+ count 1)))))
  (iter 1))

(define (compose f g)
  (lambda (x) (f (g x))))

;Input procedure that computes f and returns a procedure that computes smoothed f
;(1/3)(f(x+dx) + f(x) + f(x-dx))
(define (smooth f)
  (define dx 0.00001)
  (lambda (x)
    (* (/ 1 3) (+ (f x) (f (+ x dx)) (f (- x dx))))))

(define (smooth-n f n)
  ((repeated smooth n) f))

(define (square x) (* x x))

((smooth-n square 6) 2.1)