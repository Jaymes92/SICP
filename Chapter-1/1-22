#lang sicp
;Prime checking (from book).
(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (square x)
  (* x x))

;Timing (from book).
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

;Check consecutive odd integers in range.
(define (search-for-primes start-range end-range)
  (cond ((even? start-range) (search-for-primes (+ start-range 1) end-range))
        (else (timed-prime-test start-range)
              (if (< start-range (- end-range 1)) (search-for-primes (+ start-range 2) end-range)))))

(define (even? x)
  (= (remainder x 2) 0))

;Select ranges that show the first three primes.
;In range 1,000 it took [2,2,2] us. (avg 2.0 us)
;In range 10,000 it took [6,5,5] us (avg 5.333 us)
;In range 100,000 it took [12,13,12] us (avg 12.333 us)
;In range 1,000,000 it took [36,39,38] us (avg 37.667 us)
;Look at ratio of average compute times between ranges.
;(5.333)/(2) = 2.667
;(12.333)/(5.333) = 2.313
;(37.667)/(12.333) = 3.054
;Note that sqrt(10) ~ 3.16 so our ratios are all under the O(sqrt(n)) dependency.
;Note that cuberoot(10) ~ 2.15 so this computation seems to have a dependency that falls between these two roots.
(search-for-primes 1001 1019)
(search-for-primes 10000 10037)
(search-for-primes 100000 100043)
(search-for-primes 1000000 1000037)