#lang sicp
(define (even? x)
  (= (remainder x 2) 0))

(define (square x)
  (* x x))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

;Return true if a^n is congruent to a modulo n for all a < n, otherwise return false.
;Need to start at a = 2.
(define (fermat-test n a)
  (cond ((>= a n) #t)
        ((= (expmod a n n) (remainder a n)) (fermat-test n (+ a 1)))
        (else #f)))

;All these evaluate to true.
(fermat-test 561 2)
(fermat-test 1105 2)
(fermat-test 1729 2)
(fermat-test 2465 2)
(fermat-test 2821 2)
(fermat-test 6601 2)
