#lang sicp
;Recursive product procedure. Define and test with factorial.
(define (product-recur term a next b)
  (if (> a b)
      1
      (* (term a) (product-recur term (next a) next b))))

(define (identity x) x)

(define (factorial-recur n)
  (product-recur identity 1 inc n))

(factorial-recur 12)

;Iterative product procedure. Define and test with factorial.
(define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result))))
  (iter a 1))

(define (factorial-iter n)
  (product-iter identity 1 inc n))

(factorial-iter 12)

;Test the approximation of pi. Not sure why this doesn't work! 
(define (square x) (* x x))
(define (pi-next x) (+ x 2))
(* 8.0 (/
      (product-iter square 4 pi-next 50)
      (product-iter square 3 pi-next 49)))
