#lang sicp
;Flatmap/filter/accumulate.
(define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

;Types and checks.
(define (variable? x) (symbol? x))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))

;Constructors.

;Input as many terms as needed. Use append to add a2 to (+ a1..), but use filter to remove any numerical 0's.
(define (make-sum a1 . a2)
  (cond ((and (number? a1) (number? a2)) (+ a1 a2))
        ((=number? a1 0)
         (append (list '+)
                 (filter (lambda (x)
                           (not (=number? x 0)))
                         a2)))
        ;Using flatmap as passing in a list for a2 (as in augend procedure) needs to be flattened for some reason.
        (else
         (append (list '+ a1)
                 (flatmap (lambda (x) x)
                          (filter (lambda (x)
                                    (not (=number? x 0)))
                                  a2))))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))

(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        (else (list '** b e))))

;Selectors.

(define (addend s) (cadr s))

(define (augend s)
  (if (null? (cdddr s))
      (caddr s)
      ((make-sum (caddr s) (cdddr s)))))

(define (multiplier p) (cadr p))

(define (multiplicand p) (caddr p))

(define (base p) (cadr p))

(define (exponent p) (caddr p))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (display "sum called with ")
         (display exp)
         (newline)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (make-product (exponent exp)
                       (make-product (make-exponentiation (base exp) (- (exponent exp) 1))
                                     (deriv (base exp) var))))
        (else
         (error "unkown expression type --- DERIV" exp))))

(deriv '(+ x x) 'x)
