#lang sicp
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (cond((null? set) (list x))
       ((< (weight x) (weight (car set))) (cons x set))
       (else (cons (car set)
                   (adjoin-set x (cdr set))))))

;Leaf constructor and selectors.
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? object)
  (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))

;Tree constructor and selectors.
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))

(define (right-branch tree) (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

;Encoding procedures.
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

;I realize now I could have used memq but this shall remain.
(define (encode-symbol symbol tree)
  (cond ((leaf? tree)
         '())
        ((element-of-set? symbol (symbols (left-branch tree)))
         (cons 0 (encode-symbol symbol (left-branch tree))))
        ((element-of-set? symbol (symbols (right-branch tree)))
         (cons 1 (encode-symbol symbol (right-branch tree))))
        (else (error "bad symbol" symbol))))

;Decoding procedures.
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bat bit --CHOOSE-BRANCH" bit))))

;Take unordered list of (symbol,frequency) pairs and constructs an initial ordered set of leaves. 
(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))

(define (successive-merge nodes)
  (cond ((null? (cdr nodes)) (car nodes))
        (else (let ((merged (make-code-tree (car nodes) (cadr nodes))))
                (successive-merge (adjoin-set merged (cddr nodes)))))))

(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))

;Both encoding and decoding are working!
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree (make-leaf 'D 1)
                                   (make-leaf 'C 1)))))

(define sample-encoded-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define sample-decoded-message '(A D A B B C A))
(decode sample-encoded-message sample-tree)
(encode sample-decoded-message sample-tree)

;Compare manually coded sample-tree to the procedure, they match!
sample-tree
(generate-huffman-tree (list (list 'B 2) (list 'D 1) (list 'A 4) (list 'C 1)))

(define song-tree (generate-huffman-tree (list (list 'A 2) (list 'NA 16)
                                               (list 'BOOM 1) (list 'SHA 3)
                                               (list 'GET 2) (list 'YIP 9)
                                               (list 'JOB 2) (list 'WAH 1))))

;Encode then decode the message to make sure it works.
(define song-message '(GET A JOB
                           SHA NA NA NA NA NA NA NA NA
                           GET A JOB
                           SHA NA NA NA NA NA NA NA NA
                           WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP
                           SHA BOOM))
(define encoded-song-message (encode song-message song-tree))
encoded-song-message
(define decoded-song-message (decode encoded-song-message song-tree))
decoded-song-message

;Need 5 bits for the infrequent numbers when using this encoding.
;If using fixed length we could do it with three bits.
(encode (list 'A)  song-tree)
(encode (list 'NA)  song-tree)
(encode (list 'BOOM)  song-tree)
(encode (list 'SHA)  song-tree)
(encode (list 'GET)  song-tree)
(encode (list 'YIP)  song-tree)
(encode (list 'JOB)  song-tree)
(encode (list 'WAH)  song-tree)