#lang sicp
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (x) (dot-product v x)) m))

;Testing
(define matrix (list (list 1 4) (list 2 5) (list 3 6)))
(define vector (list 1 2))

(matrix-*-vector matrix vector)