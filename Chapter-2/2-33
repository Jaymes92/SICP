#lang sicp
(define (square x) (* x x))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

;Fill in the blanks to re-write these basic procedures.
;Construct list applying p to each element as you go.
(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) nil sequence))

;Need seq2 to be 'initial' so it gets added last as we loop through constructing seq1 (convince self with substitution) 
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

;Function passed in accepts two arguments due to accumulate, but ignores the first. Add one for each element that exists (starting at 0).
(define (length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))

;Various tests.
(define test-list (list 1 2 3 4))
(define y (list (list (list 5 2 3) (list 4 5)) (list (list 6 7) (list 8 9 10))))

(map square test-list)
(append test-list test-list)
(append test-list y)
(length test-list)
(length (list test-list test-list))
(length (append test-list test-list))