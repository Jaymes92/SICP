#lang sicp
(define (element-of-set? x set)
  (cond ((null? set)
         (display "Could not find ")
         (display x)
         (newline)
         false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

;Leaf constructor and selectors.
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? object)
  (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))

;Tree constructor and selectors.
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))

(define (right-branch tree) (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

;Encoding procedures.
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (display "encode-symbol called with ")
  (display symbol)
  (newline)
  (cond ((leaf? tree)
         (display "Leaf found ")
         (display symbol)
         (newline)
         '())
        ((element-of-set? symbol (left-branch tree))
         (display "left")
         (newline)
         (cons 0 (encode-symbol symbol (left-branch tree))))
        ((element-of-set? symbol (right-branch tree))
         (cons 1 (encode-symbol symbol (right-branch tree))))
        (else (error "bad symbol" symbol))))

;Decoding procedures.
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bat bit --CHOOSE-BRANCH" bit))))

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree (make-leaf 'D 1)
                                   (make-leaf 'C 1)))))

(define sample-encoded-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define sample-decoded-message '(A D A B B C A))
(decode sample-encoded-message sample-tree)
(encode sample-decoded-message sample-tree)