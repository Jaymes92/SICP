#lang sicp
;From 2.08.
(define (make-interval a b) (cons a b))
(define (lower-bound i) (min (car i) (cdr i)))
(define (upper-bound i) (max (car i) (cdr i)))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (if (spans-0? y)
      (display "Divisor spans 0!")
      (mul-interval x (make-interval (/ 1.0 (upper-bound y)) (/ 1.0 (lower-bound y))))))

;Check if end points land on 0.
;If it crosses the 0 point in the middle of the span, then the end-points will have different signs.
(define (spans-0? x)
  (if (or (= 0 (lower-bound x)) (= 0 (upper-bound x)) (< (/ (lower-bound x) (upper-bound x)) 0))
      #t
      #f))

;Test it will block division with interval that crosses 0.
(define I1 (make-interval 1 3))
(define I2 (make-interval -5 1))
(div-interval I1 I2)