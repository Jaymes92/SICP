#lang sicp
(define (fold-right op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (fold-right op initial (cdr sequence)))))

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

;(fold-right / 1 (list 1 2 3))
;(/ 1 (fold-right / 1 (list 2 3)))
;(/ 1 (/ 2 (fold-right / 1 (list 3))))
;(/ 1 (/ 2 (/ 3 (fold-right / 1 ()))))
;(/ 1 (/ 2 (/ 3 1)))
;(/ 1 (/ 2 3))
;(/ 1 (2/3))
;(3/2)
(fold-right / 1 (list 1 2 3))
;(fold-left / 1 (list 1 2 3))
;(iter 1 (list 1 2 3))
;(iter (/ 1 1) (list 2 3))
;(iter 1 (list 2 3))
;(iter (/ 1 2) (list 3))
;(iter (1/2) (list 3))
;(iter (/ (1/2) 3) ())
;(iter (1/6) ())
;(1/6)
(fold-left / 1 (list 1 2 3))
;(fold-right list nil (list 1 2 3))
;(list 1 (fold-right list nil (list 2 3)))
;(list 1 (list 2 (fold-right list nil (list 3))))
;(list 1 (list 2 (list 3 (fold-right list nil ()))))
;(list 1 (list 2 (list 3 ())))
;(1 (2 (3 ())))
(fold-right list nil (list 1 2 3))
;(fold-left list nil (list 1 2 3))
;(iter nil (list 1 2 3))
;(iter (list nil 1) (list 2 3))
;(iter (list (list nil 1) 2) (list 3))
;(iter (list (list (list nil 1) 2) 3) ())
;(list (list (list nil 1) 2) 3)
;(((() 1) 2) 3)
(fold-left list nil (list 1 2 3))
;To get the same results between the two, op must satisfy the associative property.