#lang sicp
;No change if we allow duplicates in the set.
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

;Goes from O(n) to one operation by not having to call element-of-set?
(define (adjoin-set x set)
  (cons x set))

;Goes from O(n**2) to O(n)? [I think append has go through one list fully, so (n/2)?]
(define (union-set set1 set2)
  (append set1 set2))

;Intersection set should remain the same as one list still has to be searched, and one list looped over.