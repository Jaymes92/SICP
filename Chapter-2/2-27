#lang sicp
;Come up with a better version of reverse compared to my prior 2.18 solution.
;Didn't end up using it - modelled solution after it + more elegant than prior solution.
(define (reverse items)
  (define (iter remain result)
    (if (null? remain)
        result
        (iter (cdr remain) (cons (car remain) result))))
  (iter items nil))

;Key is to check when pass in number (not a pair) to just return the number. Reminder:
;Internal 'iter' procedure is just like above reverse (like a horizontal reversal) where
;every car element is 'deep-reversed' -- like vertical drop then call reverse at that 'level'.
(define (deep-reverse items)
  (define (iter remain result)
    (if (null? remain)
        result
        (iter (cdr remain) (cons (deep-reverse (car remain)) result))))
  (if (not (pair? items))
      items
      (iter items nil)))

;Testing both new reverse and deep-reverse, looks good! Needed to look up some advice on the
;pair? checking but we got there.
(define x (list (list 1 2) (list 3 4) (list 5 6)))
(reverse x)
(deep-reverse x)
(define y (list (list (list 1 2 3) (list 4 5)) (list (list 6 7) (list 8 9 10))))
(reverse y)
(deep-reverse y)